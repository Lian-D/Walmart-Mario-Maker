// Generated from src/parser/PlatformerLexer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class PlatformerLexer extends Lexer {
	public static readonly LEADING_SPACE = 1;
	public static readonly PLAYER = 2;
	public static readonly ENEMY = 3;
	public static readonly DOOR = 4;
	public static readonly TERRAIN = 5;
	public static readonly PLATFORM = 6;
	public static readonly BUTTON = 7;
	public static readonly COIN = 8;
	public static readonly LEVEL = 9;
	public static readonly CHECKS = 10;
	public static readonly IF = 11;
	public static readonly ADD = 12;
	public static readonly REMOVE = 13;
	public static readonly MONEY = 14;
	public static readonly OPEN_BRACE = 15;
	public static readonly CLOSE_BRACE = 16;
	public static readonly STMT_NEWLINE = 17;
	public static readonly NAME = 18;
	public static readonly CONST = 19;
	public static readonly COMMA = 20;
	public static readonly OPEN_PAREN = 21;
	public static readonly CLOSE_PAREN = 22;
	public static readonly OPEN_SQUARE = 23;
	public static readonly CLOSED_SQUARE = 24;
	public static readonly LARGER = 25;
	public static readonly SMALLER = 26;
	public static readonly SEMICOLON = 27;
	public static readonly COLON = 28;
	public static readonly SPACE = 29;
	public static readonly NEWLINE = 30;
	public static readonly EXP_MODE = 1;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "EXP_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LEADING_SPACE", "PLAYER", "ENEMY", "DOOR", "TERRAIN", "PLATFORM", "BUTTON", 
		"COIN", "LEVEL", "CHECKS", "IF", "ADD", "REMOVE", "MONEY", "OPEN_BRACE", 
		"CLOSE_BRACE", "STMT_NEWLINE", "NAME", "CONST", "COMMA", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_SQUARE", "CLOSED_SQUARE", "LARGER", "SMALLER", "SEMICOLON", 
		"COLON", "SPACE", "NEWLINE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, "'Player '", "'Enemy '", "'Door '", "'Terrain '", 
		"'Platform '", "'Button '", "'Coin'", "'Level '", "'Checks '", "'if '", 
		"'Add'", "'Remove'", "'MONEY'", "'{'", "'}'", undefined, undefined, undefined, 
		"','", "'('", "')'", "'['", "']'", "'>'", "'<'", "';'", "':'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "LEADING_SPACE", "PLAYER", "ENEMY", "DOOR", "TERRAIN", "PLATFORM", 
		"BUTTON", "COIN", "LEVEL", "CHECKS", "IF", "ADD", "REMOVE", "MONEY", "OPEN_BRACE", 
		"CLOSE_BRACE", "STMT_NEWLINE", "NAME", "CONST", "COMMA", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_SQUARE", "CLOSED_SQUARE", "LARGER", "SMALLER", "SEMICOLON", 
		"COLON", "SPACE", "NEWLINE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(PlatformerLexer._LITERAL_NAMES, PlatformerLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return PlatformerLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(PlatformerLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "PlatformerLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return PlatformerLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return PlatformerLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return PlatformerLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return PlatformerLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02 \xF2\b\x01\b" +
		"\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t" +
		"\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04" +
		"\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12" +
		"\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17" +
		"\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C" +
		"\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x03\x02\x06\x02B\n\x02" +
		"\r\x02\x0E\x02C\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06" +
		"\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07" +
		"\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x10\x03\x10\x03\x11\x03\x11\x03\x12\x06\x12\xC0\n\x12\r\x12\x0E\x12\xC1" +
		"\x03\x13\x03\x13\x07\x13\xC6\n\x13\f\x13\x0E\x13\xC9\v\x13\x03\x14\x05" +
		"\x14\xCC\n\x14\x03\x14\x06\x14\xCF\n\x14\r\x14\x0E\x14\xD0\x03\x15\x03" +
		"\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03" +
		"\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x06" +
		"\x1E\xE6\n\x1E\r\x1E\x0E\x1E\xE7\x03\x1E\x03\x1E\x03\x1F\x06\x1F\xED\n" +
		"\x1F\r\x1F\x0E\x1F\xEE\x03\x1F\x03\x1F\x02\x02\x02 \x04\x02\x03\x06\x02" +
		"\x04\b\x02\x05\n\x02\x06\f\x02\x07\x0E\x02\b\x10\x02\t\x12\x02\n\x14\x02" +
		"\v\x16\x02\f\x18\x02\r\x1A\x02\x0E\x1C\x02\x0F\x1E\x02\x10 \x02\x11\"" +
		"\x02\x12$\x02\x13&\x02\x14(\x02\x15*\x02\x16,\x02\x17.\x02\x180\x02\x19" +
		"2\x02\x1A4\x02\x1B6\x02\x1C8\x02\x1D:\x02\x1E<\x02\x1F>\x02 \x04\x02\x03" +
		"\x07\x04\x02\v\v\"\"\x04\x02\f\f\x0F\x0F\x04\x02C\\c|\x05\x022;C\\c|\x03" +
		"\x022;\x02\xF7\x02\x04\x03\x02\x02\x02\x02\x06\x03\x02\x02\x02\x02\b\x03" +
		"\x02\x02\x02\x02\n\x03\x02\x02\x02\x02\f\x03\x02\x02\x02\x02\x0E\x03\x02" +
		"\x02\x02\x02\x10\x03\x02\x02\x02\x02\x12\x03\x02\x02\x02\x02\x14\x03\x02" +
		"\x02\x02\x02\x16\x03\x02\x02\x02\x02\x18\x03\x02\x02\x02\x02\x1A\x03\x02" +
		"\x02\x02\x02\x1C\x03\x02\x02\x02\x02\x1E\x03\x02\x02\x02\x02 \x03\x02" +
		"\x02\x02\x02\"\x03\x02\x02\x02\x02$\x03\x02\x02\x02\x03&\x03\x02\x02\x02" +
		"\x03(\x03\x02\x02\x02\x03*\x03\x02\x02\x02\x03,\x03\x02\x02\x02\x03.\x03" +
		"\x02\x02\x02\x030\x03\x02\x02\x02\x032\x03\x02\x02\x02\x034\x03\x02\x02" +
		"\x02\x036\x03\x02\x02\x02\x038\x03\x02\x02\x02\x03:\x03\x02\x02\x02\x03" +
		"<\x03\x02\x02\x02\x03>\x03\x02\x02\x02\x04A\x03\x02\x02\x02\x06G\x03\x02" +
		"\x02\x02\bQ\x03\x02\x02\x02\nZ\x03\x02\x02\x02\fb\x03\x02\x02\x02\x0E" +
		"m\x03\x02\x02\x02\x10y\x03\x02\x02\x02\x12\x83\x03\x02\x02\x02\x14\x8A" +
		"\x03\x02\x02\x02\x16\x93\x03\x02\x02\x02\x18\x9D\x03\x02\x02\x02\x1A\xA3" +
		"\x03\x02\x02\x02\x1C\xA9\x03\x02\x02\x02\x1E\xB2\x03\x02\x02\x02 \xBA" +
		"\x03\x02\x02\x02\"\xBC\x03\x02\x02\x02$\xBF\x03\x02\x02\x02&\xC3\x03\x02" +
		"\x02\x02(\xCB\x03\x02\x02\x02*\xD2\x03\x02\x02\x02,\xD4\x03\x02\x02\x02" +
		".\xD6\x03\x02\x02\x020\xD8\x03\x02\x02\x022\xDA\x03\x02\x02\x024\xDC\x03" +
		"\x02\x02\x026\xDE\x03\x02\x02\x028\xE0\x03\x02\x02\x02:\xE2\x03\x02\x02" +
		"\x02<\xE5\x03\x02\x02\x02>\xEC\x03\x02\x02\x02@B\t\x02\x02\x02A@\x03\x02" +
		"\x02\x02BC\x03\x02\x02\x02CA\x03\x02\x02\x02CD\x03\x02\x02\x02DE\x03\x02" +
		"\x02\x02EF\b\x02\x02\x02F\x05\x03\x02\x02\x02GH\x07R\x02\x02HI\x07n\x02" +
		"\x02IJ\x07c\x02\x02JK\x07{\x02\x02KL\x07g\x02\x02LM\x07t\x02\x02MN\x07" +
		"\"\x02\x02NO\x03\x02\x02\x02OP\b\x03\x03\x02P\x07\x03\x02\x02\x02QR\x07" +
		"G\x02\x02RS\x07p\x02\x02ST\x07g\x02\x02TU\x07o\x02\x02UV\x07{\x02\x02" +
		"VW\x07\"\x02\x02WX\x03\x02\x02\x02XY\b\x04\x03\x02Y\t\x03\x02\x02\x02" +
		"Z[\x07F\x02\x02[\\\x07q\x02\x02\\]\x07q\x02\x02]^\x07t\x02\x02^_\x07\"" +
		"\x02\x02_`\x03\x02\x02\x02`a\b\x05\x03\x02a\v\x03\x02\x02\x02bc\x07V\x02" +
		"\x02cd\x07g\x02\x02de\x07t\x02\x02ef\x07t\x02\x02fg\x07c\x02\x02gh\x07" +
		"k\x02\x02hi\x07p\x02\x02ij\x07\"\x02\x02jk\x03\x02\x02\x02kl\b\x06\x03" +
		"\x02l\r\x03\x02\x02\x02mn\x07R\x02\x02no\x07n\x02\x02op\x07c\x02\x02p" +
		"q\x07v\x02\x02qr\x07h\x02\x02rs\x07q\x02\x02st\x07t\x02\x02tu\x07o\x02" +
		"\x02uv\x07\"\x02\x02vw\x03\x02\x02\x02wx\b\x07\x03\x02x\x0F\x03\x02\x02" +
		"\x02yz\x07D\x02\x02z{\x07w\x02\x02{|\x07v\x02\x02|}\x07v\x02\x02}~\x07" +
		"q\x02\x02~\x7F\x07p\x02\x02\x7F\x80\x07\"\x02\x02\x80\x81\x03\x02\x02" +
		"\x02\x81\x82\b\b\x03\x02\x82\x11\x03\x02\x02\x02\x83\x84\x07E\x02\x02" +
		"\x84\x85\x07q\x02\x02\x85\x86\x07k\x02\x02\x86\x87\x07p\x02\x02\x87\x88" +
		"\x03\x02\x02\x02\x88\x89\b\t\x03\x02\x89\x13\x03\x02\x02\x02\x8A\x8B\x07" +
		"N\x02\x02\x8B\x8C\x07g\x02\x02\x8C\x8D\x07x\x02\x02\x8D\x8E\x07g\x02\x02" +
		"\x8E\x8F\x07n\x02\x02\x8F\x90\x07\"\x02\x02\x90\x91\x03\x02\x02\x02\x91" +
		"\x92\b\n\x03\x02\x92\x15\x03\x02\x02\x02\x93\x94\x07E\x02\x02\x94\x95" +
		"\x07j\x02\x02\x95\x96\x07g\x02\x02\x96\x97\x07e\x02\x02\x97\x98\x07m\x02" +
		"\x02\x98\x99\x07u\x02\x02\x99\x9A\x07\"\x02\x02\x9A\x9B\x03\x02\x02\x02" +
		"\x9B\x9C\b\v\x03\x02\x9C\x17\x03\x02\x02\x02\x9D\x9E\x07k\x02\x02\x9E" +
		"\x9F\x07h\x02\x02\x9F\xA0\x07\"\x02\x02\xA0\xA1\x03\x02\x02\x02\xA1\xA2" +
		"\b\f\x03\x02\xA2\x19\x03\x02\x02\x02\xA3\xA4\x07C\x02\x02\xA4\xA5\x07" +
		"f\x02\x02\xA5\xA6\x07f\x02\x02\xA6\xA7\x03\x02\x02\x02\xA7\xA8\b\r\x03" +
		"\x02\xA8\x1B\x03\x02\x02\x02\xA9\xAA\x07T\x02\x02\xAA\xAB\x07g\x02\x02" +
		"\xAB\xAC\x07o\x02\x02\xAC\xAD\x07q\x02\x02\xAD\xAE\x07x\x02\x02\xAE\xAF" +
		"\x07g\x02\x02\xAF\xB0\x03\x02\x02\x02\xB0\xB1\b\x0E\x03\x02\xB1\x1D\x03" +
		"\x02\x02\x02\xB2\xB3\x07O\x02\x02\xB3\xB4\x07Q\x02\x02\xB4\xB5\x07P\x02" +
		"\x02\xB5\xB6\x07G\x02\x02\xB6\xB7\x07[\x02\x02\xB7\xB8\x03\x02\x02\x02" +
		"\xB8\xB9\b\x0F\x03\x02\xB9\x1F\x03\x02\x02\x02\xBA\xBB\x07}\x02\x02\xBB" +
		"!\x03\x02\x02\x02\xBC\xBD\x07\x7F\x02\x02\xBD#\x03\x02\x02\x02\xBE\xC0" +
		"\t\x03\x02\x02\xBF\xBE\x03\x02\x02\x02\xC0\xC1\x03\x02\x02\x02\xC1\xBF" +
		"\x03\x02\x02\x02\xC1\xC2\x03\x02\x02\x02\xC2%\x03\x02\x02\x02\xC3\xC7" +
		"\t\x04\x02\x02\xC4\xC6\t\x05\x02\x02\xC5\xC4\x03\x02\x02\x02\xC6\xC9\x03" +
		"\x02\x02\x02\xC7\xC5\x03\x02\x02\x02\xC7\xC8\x03\x02\x02\x02\xC8\'\x03" +
		"\x02\x02\x02\xC9\xC7\x03\x02\x02\x02\xCA\xCC\x07/\x02\x02\xCB\xCA\x03" +
		"\x02\x02\x02\xCB\xCC\x03\x02\x02\x02\xCC\xCE\x03\x02\x02\x02\xCD\xCF\t" +
		"\x06\x02\x02\xCE\xCD\x03\x02\x02\x02\xCF\xD0\x03\x02\x02\x02\xD0\xCE\x03" +
		"\x02\x02\x02\xD0\xD1\x03\x02\x02\x02\xD1)\x03\x02\x02\x02\xD2\xD3\x07" +
		".\x02\x02\xD3+\x03\x02\x02\x02\xD4\xD5\x07*\x02\x02\xD5-\x03\x02\x02\x02" +
		"\xD6\xD7\x07+\x02\x02\xD7/\x03\x02\x02\x02\xD8\xD9\x07]\x02\x02\xD91\x03" +
		"\x02\x02\x02\xDA\xDB\x07_\x02\x02\xDB3\x03\x02\x02\x02\xDC\xDD\x07@\x02" +
		"\x02\xDD5\x03\x02\x02\x02\xDE\xDF\x07>\x02\x02\xDF7\x03\x02\x02\x02\xE0" +
		"\xE1\x07=\x02\x02\xE19\x03\x02\x02\x02\xE2\xE3\x07<\x02\x02\xE3;\x03\x02" +
		"\x02\x02\xE4\xE6\t\x02\x02\x02\xE5\xE4\x03\x02\x02\x02\xE6\xE7\x03\x02" +
		"\x02\x02\xE7\xE5\x03\x02\x02\x02\xE7\xE8\x03\x02\x02\x02\xE8\xE9\x03\x02" +
		"\x02\x02\xE9\xEA\b\x1E\x02\x02\xEA=\x03\x02\x02\x02\xEB\xED\t\x03\x02" +
		"\x02\xEC\xEB\x03\x02\x02\x02\xED\xEE\x03\x02\x02\x02\xEE\xEC\x03\x02\x02" +
		"\x02\xEE\xEF\x03\x02\x02\x02\xEF\xF0\x03\x02\x02\x02\xF0\xF1\b\x1F\x04" +
		"\x02\xF1?\x03\x02\x02\x02\v\x02\x03C\xC1\xC7\xCB\xD0\xE7\xEE\x05\x02\x03" +
		"\x02\x04\x03\x02\x04\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!PlatformerLexer.__ATN) {
			PlatformerLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(PlatformerLexer._serializedATN));
		}

		return PlatformerLexer.__ATN;
	}

}

